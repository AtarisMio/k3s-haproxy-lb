#!/bin/sh
set -ex

klipper() {
    trap exit TERM INT

    BIN_DIR="/sbin"

    info() {
        { set +x; } 2> /dev/null
        echo '[INFO] ' "$@"
        set -x
    }

    fatal() {
        { set +x; } 2> /dev/null
        echo '[ERROR] ' "$@" >&2
        set -x
        exit 1
    }

    check_iptables_mode() {
        set +e
        lsmod | grep -qF nf_tables 2> /dev/null
        if [ $? = 0 ]; then
            mode=nft
        else 
            mode=legacy
        fi
        set -e

        case "$mode" in
            nft)
                info "nft mode detected"
                set_nft
                ;;
            legacy)
                info "legacy mode detected"
                set_legacy
                ;;
            *)
                fatal "invalid iptables mode"
                ;;
        esac
    }

    set_nft() {
        for i in iptables iptables-save iptables-restore ip6tables; do 
            ln -sf /sbin/xtables-nft-multi "$BIN_DIR/$i";
        done
    }

    set_legacy() {
        for i in iptables iptables-save iptables-restore ip6tables; do 
            ln -sf /sbin/xtables-legacy-multi "$BIN_DIR/$i";
        done
    }

    start_proxy() {
        for src_range in ${SRC_RANGES//,/ }; do
            if echo ${src_range} | grep -Eq ":"; then
                ip6tables -t filter -I FORWARD -s ${src_range} -p ${DEST_PROTO} --dport ${DEST_PORT} -j ACCEPT
            else
                iptables -t filter -I FORWARD -s ${src_range} -p ${DEST_PROTO} --dport ${DEST_PORT} -j ACCEPT
            fi
        done

        for dest_ip in ${DEST_IPS//,/ }; do
            if echo ${dest_ip} | grep -Eq ":"; then
                [ $(cat /proc/sys/net/ipv6/conf/all/forwarding) == 1 ] || exit 1
                ip6tables -t filter -A FORWARD -d ${dest_ip}/128 -p ${DEST_PROTO} --dport ${DEST_PORT} -j DROP
                ip6tables -t nat -I PREROUTING -p ${DEST_PROTO} --dport ${SRC_PORT} -j DNAT --to [${dest_ip}]:${DEST_PORT}
                ip6tables -t nat -I POSTROUTING -d ${dest_ip}/128 -p ${DEST_PROTO} -j MASQUERADE
            else
                [ $(cat /proc/sys/net/ipv4/ip_forward) == 1 ] || exit 1
                iptables -t filter -A FORWARD -d ${dest_ip}/32 -p ${DEST_PROTO} --dport ${DEST_PORT} -j DROP
                iptables -t nat -I PREROUTING -p ${DEST_PROTO} --dport ${SRC_PORT} -j DNAT --to ${dest_ip}:${DEST_PORT}
                iptables -t nat -I POSTROUTING -d ${dest_ip}/32 -p ${DEST_PROTO} -j MASQUERADE
            fi
        done
    }

    check_iptables_mode
    start_proxy

    if [ ! -e /pause ]; then
        mkfifo /pause
    fi
    </pause
}

genBack() {
    first=true
    index=1
    for dest_ip in ${DEST_IPS//,/ }; do
        if echo ${dest_ip} | grep -Eq ":"; then
            if [ "$1" = "ipv6" ]; then
                if $first; then
                    echo "backend back_ipv6"
                    echo "    mode tcp"
                    echo "    balance roundrobin"
                    first=false
                fi
                echo "    server server${index} [${dest_ip}]:${DEST_PORT} send-proxy-v2"
                index=$((index + 1))
            fi
        else
            if [ "$1" = "ipv4" ]; then
                if $first; then
                    echo "backend back_ipv4"
                    echo "    mode tcp"
                    echo "    balance roundrobin"
                    first=false
                fi
                echo "    server server${index} ${dest_ip}:${DEST_PORT} send-proxy-v2"
                index=$((index + 1))
            fi
        fi
    done
}

srcRange() {
    first=true
    for src_range in ${SRC_RANGES//,/ }; do
        if echo ${src_range} | grep -Eq ":"; then
            if [ "$1" = "ipv6" ]; then 
                if $first; then
                    echo -n "tcp-request content accept if { "
                    echo -n "src ${src_range}"
                    first=false
                else
                    echo -n " or src ${src_range}"
                fi
            fi
        else
            if [ "$1" = "ipv4" ]; then
               if $first; then
                    echo -n "tcp-request content accept if { "
                    echo -n "src ${src_range}"
                    first=false
                else
                    echo -n " or src ${src_range}"
                fi
            fi 
        fi
    done
    if [ "$first" != "true" ]; then
        echo " }"
    fi
}

genHaproxy() {
    mkdir -p /var/lib/haproxy
    cat > /var/lib/haproxy/haproxy.cfg <<EOF
global
    maxconn 10000
    user haproxy

defaults
    mode                    tcp
    timeout connect         0
    timeout client          0
    timeout server          0

frontend front
    mode tcp
    bind [::]:${SRC_PORT} v4v6
    tcp-request inspect-delay 5s
    $(srcRange "ipv6")
    $(srcRange "ipv4")
    tcp-request content reject
    use_backend back_ipv4 if { src 0.0.0.0/0 }
    use_backend back_ipv6 if { src ::/0 }

$(genBack "ipv4")

$(genBack "ipv6")

EOF

    cat /var/lib/haproxy/haproxy.cfg 
}

if [ $(echo -n "$DEST_PROTO" | tr '[:upper:]' '[:lower:]') == "tcp" ]; then
    genHaproxy
    haproxy -f /var/lib/haproxy/haproxy.cfg
else
    klipper
fi
